---
/**
 * Ejemplo de componente Astro que obtiene información de
 * https://dcdn.dstn.to/profile/1125490330679115847
 * y la muestra en una tarjeta estilo "perfil de Discord".
 */

// Definimos una interfaz con los campos que esperamos de la API
interface DiscordProfile {
  user: {
    id: string;
    username: string;
    discriminator: string;
    avatar: string | null;
    bio?: string;
  };
  presence: {
    status: string;
    activities: Array<{
      name: string;
      details?: string;
      timestamps?: {
        start?: number;
        end?: number;
      };
      // Otros campos omitidos por brevedad...
    }>;
  };
}

// Realizamos la petición al cargar el componente
const response = await fetch("https://dcdn.dstn.to/profile/1125490330679115847");

// Verificamos que la respuesta sea correcta
if (!response.ok) {
  throw new Error(`Error al obtener perfil: ${response.status} ${response.statusText}`);
}

// Convertimos la respuesta a JSON y la “casteamos” a nuestra interfaz
const data = (await response.json()) as DiscordProfile;

// Extraemos datos básicos
const username = data.user.username;
const tagline = data.user.discriminator;
const bio = data.user.bio ?? "No bio provided";

// Construimos la URL del avatar si existe
const avatarUrl = data.user.avatar
  ? `https://cdn.discordapp.com/avatars/${data.user.id}/${data.user.avatar}.png?size=128`
  : "https://via.placeholder.com/128";
---

<!-- Componente de Perfil -->
<div class="profile">
  <!-- Encabezado (Avatar + Nombre + Tagline) -->
  <div class="profile-header">
    <img
      src={avatarUrl}
      alt="Avatar"
      class="avatar"
    />
    <div class="profile-info">
      <h2>{username}</h2>
      <p class="tagline">{tagline}</p>
    </div>
  </div>

  <!-- Biografía -->
  <p class="bio">{bio}</p>
</div>

<style>
  /* Estilos generales */
  .profile {
    background-color: #2f3136;
    color: #fff;
    width: 320px;
    padding: 1rem;
    border-radius: 8px;
    font-family: sans-serif;
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .profile-header {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .avatar {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    object-fit: cover;
  }

  .profile-info h2 {
    margin: 0;
    font-size: 1.1rem;
  }

  .tagline {
    margin: 0;
    font-size: 0.9rem;
    color: #b9bbbe;
  }

  .bio {
    margin: 0;
    font-size: 0.9rem;
    color: #dcddde;
    white-space: pre-line; /* Permite saltos de línea si usas \n en la bio */
  }

  .view-bio {
    display: inline-block;
    margin-top: -0.25rem;
    font-size: 0.85rem;
    color: #7289da;
    text-decoration: none;
    transition: color 0.2s;
  }

  .view-bio:hover {
    color: #5a6faa;
  }

  .playing {
    background-color: #36393f;
    border-radius: 4px;
    padding: 0.75rem;
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .playing-label {
    font-size: 0.85rem;
    color: #b9bbbe;
  }

  .playing-details {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
    flex: 1;
  }

  .playing-title {
    font-size: 0.95rem;
    color: #fff;
  }

  .playing-description {
    margin: 0;
    font-size: 0.8rem;
    color: #b9bbbe;
    white-space: pre-line; /* Permite que \n se muestre como salto de línea */
  }

  .playing-time {
    font-size: 0.8rem;
    color: #b9bbbe;
  }

  .edit-profile {
    align-self: flex-start;
    background-color: #7289da;
    color: #fff;
    border: none;
    padding: 0.5rem 0.75rem;
    border-radius: 4px;
    font-size: 0.85rem;
    cursor: pointer;
    transition: background-color 0.2s;
  }

  .edit-profile:hover {
    background-color: #5a6faa;
  }
</style>
